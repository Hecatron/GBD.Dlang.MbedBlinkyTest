# Setting up Debugging via JLink / OpenOCD

## Setting up Cortex-M GDB


### Setting up JLink / Segger

We can specify a debug profile wthin launch.json, which can then be used within Visual Studio code
The "attach" option doesn't seem to need the JLink gdb server running (I think it launches it's own)
the "launch" option I believe also flashes / updates the code on the device

So far I've managed to get this to work okay with the below settings

```
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Debug (JLink Segger)",
            "type": "cortex-debug",
            "request": "attach",
            "servertype": "jlink",
            "cwd": "${workspaceRoot}",
            "executable": "./BUILD/LPC1768/GCC_ARM/GBD.Dlang.MbedBlinkyTest.elf",
            "device": "LPC1769",
            "interface": "swd",
        }
    ]
}
```


### Setting up OpenOCD / USB

This now works, there's some entries I just needed to add to the openocd configuration
so that openocd would halt the board on connetion from gdb

  * https://mcuoneclipse.com/2016/04/09/solution-for-openocd-cannot-communicate-target-not-haltet/
  * https://github.com/Marus/cortex-debug/issues/27

```
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Debug (OpenOCD USB) - Cortex GDB",
            "type": "cortex-debug",
            "request": "attach",
            "device": "LPC1768",
            "servertype": "openocd",
            "cwd": "${workspaceRoot}",
            "executable": "./BUILD/LPC1768/GCC_ARM/GBD.Dlang.MbedBlinkyTest.elf",
            "configFiles": [
                "${workspaceRoot}/scripts/openocd_configs/usb_boardconf.cfg"
            ]
        },
    ]
}
```


## Non Cortex-M GDB

### Setting up OpenOCD / USB

If we use the regular non cortex-m specific gdb plugin for Visual Studio code
then this seems to work okay with OpenOCD, but we need to start openocd seperatley before debugging

  * https://hackaday.io/project/21045-stm32-bluepill-frameworks-evaluation/log/57272-vscode-configuring-and-debugging

```
        {
            "name": "Debug (OpenOCD USB) - Attach to GDB",
            "type": "gdb",
            "request": "attach",
            "executable": "${workspaceRoot}/BUILD/LPC1768/GCC_ARM/GBD.Dlang.MbedBlinkyTest.elf",
            "target": ":3333",
            "remote": true,
            "cwd": "${workspaceRoot}",
            "gdbpath": "arm-none-eabi-gdb.exe",
            "autorun": [
                "monitor reset halt",
                "load ${workspaceRoot}/BUILD/LPC1768/GCC_ARM/GBD.Dlang.MbedBlinkyTest.elf"
             ]
        },
```

## Command Line GDB

I've also got GDB running from the command line

  * https://stackoverflow.com/questions/38033130/how-to-use-the-gdb-gnu-debugger-and-openocd-for-microcontroller-debugging-fr

  * **scripts\openocd_flash.bat** - to flash the firmware to the board
  * **scripts\openocd_startserver.bat** - to start the openocd server
    (listens for telnet connections on port 4444, and gdb connections on 3333)
  * **scripts\openocd_startgdb.bat** - this starts a ARM gdb session which connects to the openocd server
